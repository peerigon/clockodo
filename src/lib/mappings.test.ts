import {
  queryParamMapping,
  mapQueryParams,
  mapRequestBody,
  mapResponseBody,
} from "./mappings.js";

describe("mapQueryParams()", () => {
  it("should map camelCase to snake_case", () => {
    const queryParams = createObjectFromKeys(commonKeys.camelCase);
    const mappedQueryParams = mapQueryParams(queryParams);

    expectKeysToMatch(Object.keys(mappedQueryParams), commonKeys.snakeCase);
  });

  it("should map specific keys differently", () => {
    const queryParams = createObjectFromKeys(Object.keys(queryParamMapping));
    const mappedQueryParams = mapQueryParams(queryParams);

    expectKeysToMatch(
      Object.keys(mappedQueryParams),
      Object.values(queryParamMapping)
    );
  });
});

describe("mapRequestBody()", () => {
  it("should map camelCase to snake_case", () => {
    const requestBody = createObjectFromKeys(commonKeys.camelCase);
    const mappedRequestBody = mapRequestBody(requestBody);

    expectKeysToMatch(Object.keys(mappedRequestBody), commonKeys.snakeCase);
  });
});

describe("mapResponseBody()", () => {
  it("should map snake_case to camelCase", () => {
    const responseBody = createObjectFromKeys(commonKeys.snakeCase);
    const mappedResponseBody = mapResponseBody(responseBody);

    expectKeysToMatch(Object.keys(mappedResponseBody), commonKeys.camelCase);
  });

  // The API returns some keys that are already in camelCase
  it("should not change camelCase keys", () => {
    const keys = ["lumpSumServices", "lumpSumService"];
    const responseBody = createObjectFromKeys(keys);
    const mappedResponseBody = mapResponseBody(responseBody);

    expectKeysToMatch(Object.keys(mappedResponseBody), keys);
  });
});

const expectKeysToMatch = (keysA: Array<string>, keysB: Array<string>) => {
  expect(Array.from(new Set(keysA)).sort()).toMatchObject(
    Array.from(new Set(keysB)).sort()
  );
};

const createObjectFromKeys = (keys: Array<string>) =>
  Object.fromEntries(keys.map((key) => [key, null]));

const commonKeys = {
  snakeCase: [
    "users",
    "id",
    "name",
    "number",
    "email",
    "role",
    "active",
    "timeformat_12h",
    "weekstart_monday",
    "weekend_friday",
    "language",
    "timezone",
    "wage_type",
    "can_generally_see_absences",
    "can_generally_manage_absences",
    "can_add_customers",
    "worktime_regulation_id",
    "teams_id",
    "initials",
    "edit_lock",
    "edit_lock_dyn",
    "edit_lock_sync",
    "projects",
    "customers_id",
    "billable_default",
    "note",
    "budget_money",
    "budget_is_hours",
    "budget_is_not_strict",
    "billed_money",
    "billed_completely",
    "completed",
    "revenue_factor",
    "paging",
    "items_per_page",
    "current_page",
    "count_pages",
    "count_items",
    "filter",
    "billable",
    "entries",
    "projects_id",
    "users_id",
    "texts_id",
    "text",
    "time_since",
    "time_until",
    "time_insert",
    "time_last_change",
    "type",
    "services_id",
    "duration",
    "time_last_change_work_time",
    "time_clocked_since",
    "clocked",
    "clocked_offline",
    "hourly_rate",
    "entry",
    "lumpsum",
    "lumpsum_services_id",
    "lumpsum_services_amount",
    "running",
    "success",
    "groups",
    "grouped_by",
    "group",
    "restrictions",
    "revenue",
    "has_budget_revenues_billed",
    "has_budget_revenues_not_billed",
    "has_non_budget_revenues_billed",
    "has_non_budget_revenues_not_billed",
    "budget_used",
    "hourly_rate_is_equal_and_has_no_lumpsums",
    "sub_groups",
    "current_time",
    "price",
    "unit",
    "userreports",
    "users_name",
    "users_number",
    "users_email",
    "sum_target",
    "sum_hours",
    "sum_reduction",
    "sum_reduction_used",
    "sum_reduction_planned",
    "overtime_carryover",
    "overtime_reduced",
    "diff",
    "holidays_quota",
    "holidays_carry",
    "sum_absence",
    "regular_holidays",
    "sick_self",
    "sick_child",
    "special_leaves",
    "school",
    "maternity_protection",
    "home_office",
    "out_of_office",
    "quarantine",
    "military_service",
    "workdays",
    "holidays_used",
    "special_holidays",
    "sickdays",
    "month_details",
    "nr",
    "sum_hours_without_compensation",
    "sum_overtime_reduced",
    "week_details",
    "userreport",
    "day_details",
    "date",
    "weekday",
    "nonbusiness",
    "count_absence",
    "count_reduction_used",
    "target",
    "target_raw",
    "count_ot_reduction",
    "count_sick",
    "count_holidays",
    "count_special_leaves",
    "hours",
    "hours_without_compensation",
    "nonbusinessgroups",
    "nonbusinessdays",
    "half_day",
    "user",
    "company",
    "timezone_default",
    "currency",
    "allow_entries_text_multiline",
    "allow_entries_for_customers",
    "force_linked_entry_times",
    "default_customers_id",
    "default_services_id",
    "module_absence",
    "module_work_time",
    "module_project_times",
    "module_entries_texts",
    "nonbusiness_group_default",
    "worktime_regulation_default",
    "worktime_evaluate_regulations_since",
    "worktime_force_breaks",
    "holidays_count_default",
    "absence_reduces_target_hours",
    "compensate_day_default",
    "compensate_month_default",
    "target_hours_default",
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
    "sunday",
    "onboarding_complete",
    "worktime_regulation",
    "add_to_worktime",
    "daily_max",
    "weekly_max",
    "interval_max",
    "rules",
    "worktime",
    "break_sum",
    "splitting",
    "2",
    "3",
  ],
  camelCase: [
    "users",
    "id",
    "name",
    "number",
    "email",
    "role",
    "active",
    "timeformat12H",
    "weekstartMonday",
    "weekendFriday",
    "language",
    "timezone",
    "wageType",
    "canGenerallySeeAbsences",
    "canGenerallyManageAbsences",
    "canAddCustomers",
    "worktimeRegulationId",
    "teamsId",
    "initials",
    "editLock",
    "editLockDyn",
    "editLockSync",
    "projects",
    "customersId",
    "billableDefault",
    "note",
    "budgetMoney",
    "budgetIsHours",
    "budgetIsNotStrict",
    "billedMoney",
    "billedCompletely",
    "completed",
    "revenueFactor",
    "paging",
    "itemsPerPage",
    "currentPage",
    "countPages",
    "countItems",
    "filter",
    "billable",
    "entries",
    "projectsId",
    "usersId",
    "textsId",
    "text",
    "timeSince",
    "timeUntil",
    "timeInsert",
    "timeLastChange",
    "type",
    "servicesId",
    "duration",
    "timeLastChangeWorkTime",
    "timeClockedSince",
    "clocked",
    "clockedOffline",
    "hourlyRate",
    "entry",
    "lumpsum",
    "lumpsumServicesId",
    "lumpsumServicesAmount",
    "running",
    "success",
    "groups",
    "groupedBy",
    "group",
    "restrictions",
    "revenue",
    "hasBudgetRevenuesBilled",
    "hasBudgetRevenuesNotBilled",
    "hasNonBudgetRevenuesBilled",
    "hasNonBudgetRevenuesNotBilled",
    "budgetUsed",
    "hourlyRateIsEqualAndHasNoLumpsums",
    "subGroups",
    "currentTime",
    "price",
    "unit",
    "userreports",
    "usersName",
    "usersNumber",
    "usersEmail",
    "sumTarget",
    "sumHours",
    "sumReduction",
    "sumReductionUsed",
    "sumReductionPlanned",
    "overtimeCarryover",
    "overtimeReduced",
    "diff",
    "holidaysQuota",
    "holidaysCarry",
    "sumAbsence",
    "regularHolidays",
    "sickSelf",
    "sickChild",
    "specialLeaves",
    "school",
    "maternityProtection",
    "homeOffice",
    "outOfOffice",
    "quarantine",
    "militaryService",
    "workdays",
    "holidaysUsed",
    "specialHolidays",
    "sickdays",
    "monthDetails",
    "nr",
    "sumHoursWithoutCompensation",
    "sumOvertimeReduced",
    "weekDetails",
    "userreport",
    "dayDetails",
    "date",
    "weekday",
    "nonbusiness",
    "countAbsence",
    "countReductionUsed",
    "target",
    "targetRaw",
    "countOtReduction",
    "countSick",
    "countHolidays",
    "countSpecialLeaves",
    "hours",
    "hoursWithoutCompensation",
    "nonbusinessgroups",
    "nonbusinessdays",
    "halfDay",
    "user",
    "company",
    "timezoneDefault",
    "currency",
    "allowEntriesTextMultiline",
    "allowEntriesForCustomers",
    "forceLinkedEntryTimes",
    "defaultCustomersId",
    "defaultServicesId",
    "moduleAbsence",
    "moduleWorkTime",
    "moduleProjectTimes",
    "moduleEntriesTexts",
    "nonbusinessGroupDefault",
    "worktimeRegulationDefault",
    "worktimeEvaluateRegulationsSince",
    "worktimeForceBreaks",
    "holidaysCountDefault",
    "absenceReducesTargetHours",
    "compensateDayDefault",
    "compensateMonthDefault",
    "targetHoursDefault",
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
    "sunday",
    "onboardingComplete",
    "worktimeRegulation",
    "addToWorktime",
    "dailyMax",
    "weeklyMax",
    "intervalMax",
    "rules",
    "worktime",
    "breakSum",
    "splitting",
    "2",
    "3",
  ],
};
